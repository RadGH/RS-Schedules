<?php

/**
 * Alchemy Updater
 *
 * Created by Radley Sustaire
 * Created on 2025-09-18
 * Version 1.0.0
 *
 * This script can be included with any plugin to enable automatic updates.
 * Your plugin should have the header "Alchemy Update URI" with a URL pointing to the plugin metadata JSON.
 * The JSON file is generated by the Alchemy Update Server, which must exist in an external server and is used to manage versions.
 */

if ( ! class_exists('Alchemy_Updater') ) :
class Alchemy_Updater {
	
	public static $version = '1.0.0';
	
	public function __construct() {
		
		// When WordPress checks for plugin updates, also update Alchemy Updater plugins.
		add_filter( 'site_transient_update_plugins', array( $this, 'check_for_updates' ) );
		
		// Display plugin info in the popup
		add_filter( 'plugins_api', array( $this, 'display_plugin_info' ), 20, 3 );
		
	}
	
	// Singleton instance
	protected static $instance = null;
	
	public static function get_instance() {
		if ( !isset( self::$instance ) ) self::$instance = new static();
		return self::$instance;
	}
	
	// Utilities
	
	/**
	 * Gets a full plugin path ("something/something.php") by its slug ("something").
	 *
	 * @param string $plugin_slug
	 *
	 * @return string|false
	 */
	public function get_plugin_path_by_slug( $plugin_slug ) {
		$all_plugins = get_plugins();
		
		foreach ( $all_plugins as $path => $data ) {
			if ( stripos( $path, $plugin_slug . '/' ) === 0 || strtolower($path) === strtolower($plugin_slug . '.php') ) {
				return $path;
			}
		}
		
		return false;
	}
	
	/**
	 * Gets a plugin slug ("something") by its full plugin path ("something/something.php").
	 *
	 * @param string $plugin_slug
	 *
	 * @return string|false
	 */
	public function get_plugin_slug_from_path( $plugin_slug ) {
		$all_plugins = get_plugins();
		
		foreach ( $all_plugins as $path => $data ) {
			if ( strtolower($path) === strtolower($plugin_slug) ) {
				$parts = explode( '/', $path );
				return strtolower( $parts[0] );
			}
		}
		
		return false;
	}
	
	/**
	 * Gets the plugin version from its slug
	 *
	 * @param string $plugin_path
	 *
	 * @return string|false
	 */
	public function get_plugin_version( $plugin_path ) {
		$plugin_path = WP_PLUGIN_DIR . '/' . $plugin_path;
		$plugin_data = get_plugin_data( $plugin_path );
		
		if ( $plugin_data ) {
			return $plugin_data['Version'];
		}
		
		return false;
	}
	
	/**
	 * Get the cache key that stores the plugin update metadata
	 *
	 * @param string $plugin_path
	 *
	 * @return string
	 */
	public function get_plugin_cache_key( $plugin_path ) {
		return 'alchemy_updater_' . md5( $plugin_path );
	}
	
	// Internal Hooks
	
	/**
	 * Gets the Alchemy update URL for a plugin from its headers
	 *
	 * @param string $plugin_path
	 *
	 * @return string|false
	 */
	public function get_alchemy_update_url_for_plugin( $plugin_path ) {
		// Use filters to collect the Alchemy Update URI header
		add_filter( 'extra_plugin_headers', array( $this, 'add_plugin_headers' ) );
		
		// Get plugin header data
		$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin_path );
		
		// Un-hook the filter
		remove_filter( 'extra_plugin_headers', array( $this, 'add_plugin_headers' ) );
		
		return $plugin_data['Alchemy Update URI'] ?: false;
	}
	
	/**
	 * Checks a single plugin for updates
	 *
	 * @param string $plugin_path
	 * @param string|null $current_version
	 * @param string|null $update_url
	 *
	 * @return array|false
	 */
	public function check_single_plugin_for_updates( $plugin_path, $current_version = null, $update_url = null ) {
		if ( $current_version === null ) {
			$current_version = $this->get_plugin_version( $plugin_path );
		}
		
		if ( $update_url === null ) {
			$update_url = $this->get_alchemy_update_url_for_plugin( $plugin_path );
		}
		
		if ( ! $update_url ) return false;
		
		// Remote JSON metadata URL
		$response = wp_remote_get( $update_url );
		if ( is_wp_error( $response ) ) return false;
		
		$response_code = wp_remote_retrieve_response_code( $response );
		if ( $response_code != 200 ) return false;
		
		$body = wp_remote_retrieve_body( $response );
		if ( ! $body ) return false;
		
		$data = json_decode( $body, true );
		if ( ! isset( $data['versions'] ) ) return false;
		
		// Get the latest version
		$latest_version = array_key_first( $data['versions'] );
		$latest_info = $data['versions'][ $latest_version ];
		
		if ( version_compare( $latest_version, $current_version, '>' ) ) {
			$plugin_slug = $this->get_plugin_slug_from_path( $plugin_path );
			
			$result = array(
				'alchemy_updater' => self::$version,
				'slug'            => $plugin_slug,
				'plugin'          => $plugin_path,
				'new_version'     => $latest_info['version'],
				'url'             => $data['website_url'],  // Optional plugin info page
				'package'         => $latest_info['download_url'],
				'tested'          => $latest_info['tested'],
				'requires'        => $latest_info['requires'],
				'metadata'        => array(
					'plugin_name' => $data['plugin_name'],
					'website_url' => $data['website_url'],
					'github_url' => $data['github_url'],
					'changelog' => $latest_info['changelog'],
					'release_date' => $latest_info['release_date'],
				),
			);
			
			// Store the result for 30 days
			set_transient( $this->get_plugin_cache_key( $plugin_path ), $result, DAY_IN_SECONDS * 30 );
			
			return $result;
		}
		
		return false;
	}
	
	/**
	 * Adds the Alchemy Update URI header to the list of recognized plugin headers.
	 *
	 * @param string[] $headers
	 *
	 * @return string[]
	 */
	public function add_plugin_headers( $headers ) {
		$headers['Alchemy Update URI'] = 'Alchemy Update URI';
		return $headers;
	}
	
	// Public Hooks
	
	/**
	 * When WordPress checks for plugin updates, also update Alchemy Updater plugins.
	 *
	 * @param stdClass $transient
	 *
	 * @return stdClass
	 */
	function check_for_updates( $transient ) {
		if ( empty( $transient->checked ) ) return $transient;
		
		// Collect which plugins are managed by Alchemy Updater
		$managed_plugins = array();
		
		// Check each plugin to see if it is managed by Alchemy Updater
		foreach( $transient->checked as $plugin_path => $version ) {
			$update_url = $this->get_alchemy_update_url_for_plugin( $plugin_path );
			if ( $update_url ) {
				$managed_plugins[ $plugin_path ] = array(
					'version' => $version,
					'update_url' => $update_url,
				);
			}
		}
		
		// Abort if no plugins managed by Alchemy Updater
		if ( empty( $managed_plugins ) ) return $transient;
		
		// Check each plugin and store the response in the transient
		foreach( $managed_plugins as $plugin_path => $data ) {
			$result = $this->check_single_plugin_for_updates( $plugin_path, $data['version'], $data['update_url'] );
			
			if ( $result ) {
				$transient->response[ $plugin_path ] = (object) $result;
			}
		}
		
		return $transient;
	}
	
	/**
	 * Display plugin info in the popup
	 *
	 * @param stdClass|false $result
	 * @param string $action
	 * @param array $args {
	 *    @type string $slug     - The short plugin slug (does not include folder or file extension)
	 *    @type string $plugin
	 *    @type string $version
	 * }
	 *
	 * @return stdClass
	 */
	public function display_plugin_info( $result, $action, $args ) {
		if ( $action !== 'plugin_information' || empty( $args->slug ) ) return $result;
		
		$plugin_path = $this->get_plugin_path_by_slug( $args->slug );
		if ( ! $plugin_path ) return $result;
		
		// Check if the plugin supports Alchemy Updater based on its update URL
		$update_url = $this->get_alchemy_update_url_for_plugin( $plugin_path );
		if ( ! $update_url ) return $result;
		
		// Get the stored result from the last plugin update check, otherwise check again
		$update_data = get_transient( $this->get_plugin_cache_key( $plugin_path ) );
		if ( ! $update_data ) {
			$update_data = $this->check_single_plugin_for_updates( $plugin_path );
			if ( ! $update_data ) return $result;
		}
		
		// Read plugin headers to find update URI
		$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin_path );
		
		// Collect data
		$description = $plugin_data['Description'] ?: '';
		
		$metadata = $update_data['metadata'] ?? array();
		
		$plugin_name = $metadata['plugin_name'] ?? $args->slug;
		$website_url = $metadata['website_url'] ?? '';
		$changelog = $metadata['changelog'] ?? '';
		
		// Prepare sections
		$sections = array();
		
		if ( $description || $website_url ) {
			$desc = array();
			
			if ( $description ) {
				$desc[] = $description;
			}
			if ( $website_url ) {
				$desc[] = 'Visit the plugin page: <a href="' . esc_url( $website_url ) . '">' . esc_html( $website_url ) . '</a>';
			}
			
			$sections['description'] = wpautop( implode( "\n\n", $desc ) );
		}
		
		if ( $changelog ) {
			if ( function_exists('acf_parse_markdown') ) {
				$changelog = acf_parse_markdown( $changelog );
			} else {
				$changelog = wpautop( $changelog );
			}
			$sections['changelog'] = $changelog;
			
		}
		
		// Return the data
		return (object) [
			'name'          => $plugin_name,
			'slug'          => $args->slug,
			'version'       => $update_data['new_version'],
			'requires'      => $update_data['requires'],
			'tested'        => $update_data['tested'],
			'download_link' => $update_data['package'],
			'sections'      => $sections,
		];
	}
	
}
endif;

// Initialize the updater
Alchemy_Updater::get_instance();